/*
 * Wazuh Module to analyze vulnerabilities
 * Copyright (C) 2015-2019, Wazuh Inc.
 * January 4, 2018.
 *
 * This program is a free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef CLIENT

#ifndef WM_VULNDETECTOR
#define WM_VULNDETECTOR

#include "external/sqlite/sqlite3.h"

#define WM_VULNDETECTOR_LOGTAG ARGV0 ":" VU_WM_NAME
#define WM_VULNDETECTOR_DEFAULT_INTERVAL 300 // 5 minutes
#define WM_VULNDETECTOR_DEFAULT_UPDATE_INTERVAL 3600 // 1 hour
#define WM_VULNDETECTOR_RETRY_UPDATE  300 // 5 minutes
#define WM_VULNDETECTOR_DOWN_ATTEMPTS  5
#define VU_DEF_IGNORE_TIME 21600 // 6 hours
#define VU_TEMP_FILE "tmp/vuln-temp"
#define VU_FIT_TEMP_FILE VU_TEMP_FILE "-fitted"
#define CANONICAL_REPO "https://people.canonical.com/~ubuntu-security/oval/com.ubuntu.%s.cve.oval.xml"
#define DEBIAN_REPO "https://www.debian.org/security/oval/oval-definitions-%s.xml"
#define RED_HAT_REPO_DEFAULT_MIN_YEAR 2010
#define RED_HAT_REPO_MIN_YEAR 1999
#define RED_HAT_REPO_MAX_ATTEMPTS 3
#define RED_HAT_REPO_REQ_SIZE 1000
#define RED_HAT_REPO "https://access.redhat.com/labs/securitydataapi/cve.json?after=%d-01-01&per_page=%d&page=%d"
#define NVD_CPE_REPO "https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.gz"
#define NVD_CVE_REPO_META "https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-%d.meta"
#define NVD_CVE_REPO "https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-%d.json.gz"
#define NVD_REPO_MAX_ATTEMPTS 3
#define DOWNLOAD_SLEEP_FACTOR 5
#define JSON_FILE_TEST "/tmp/package_test.json"
#define DEFAULT_OVAL_PORT 443
#define KEY_SIZE OS_SIZE_6144
#define VU_SSL_BUFFER OS_MAXSTR
#define VU_MAX_VERSION_ATTEMPS 15
#define VU_MAX_WAZUH_DB_ATTEMPS 5
#define VU_MAX_TIMESTAMP_ATTEMPS 4
#define VU_MAX_VER_COMP_IT 50
#define VU_TIMESTAMP_FAIL 0
#define VU_TIMESTAMP_UPDATED 1
#define VU_TIMESTAMP_OUTDATED 2
#define VU_AGENT_REQUEST_LIMIT   3
#define VU_ALERT_HEADER "[%03d] (%s) %s"
#define VU_ALERT_JSON "1:" VU_WM_NAME ":%s"
#define VU_MODERATE   "Moderate"
#define VU_MEDIUM     "Medium"
#define VU_HIGH       "High"
#define VU_IMPORTANT  "Important"
// Patterns for building references
#define VUL_BUILD_REF_MAX 100
#define VU_BUILD_REF_CVE_RH "https://access.redhat.com/security/cve/%s"
#define VU_BUILD_REF_BUGZ "https://bugzilla.redhat.com/show_bug.cgi?id=%s"
#define VU_BUILD_REF_RHSA "https://access.redhat.com/errata/%s"

extern const wm_context WM_VULNDETECTOR_CONTEXT;
extern const char *vu_feed_tag[];
extern const char *vu_feed_ext[];
extern const char *vu_package_comp[];
typedef struct cpe_list cpe_list;
typedef struct nvd_vulnerability nvd_vulnerability;

typedef enum vu_logic {
    VU_TRUE,
    VU_FALSE,
    VU_OR,
    VU_AND,
    VU_PACKG,
    VU_FILE_TEST,
    VU_VULNERABLE,
    VU_NOT_VULNERABLE,
    VU_UNDEFINED,
    VU_LESS,
    VU_HIGHER,
    VU_EQUAL,
    VU_ERROR_CMP,
    VU_NOT_FIXED,
    VU_NEED_UPDATE,
    VU_NOT_NEED_UPDATE,
    VU_INV_FEED
} vu_logic;

typedef enum vu_feed {
    FEED_UBUNTU,
    FEED_DEBIAN,
    FEED_REDHAT,
    FEED_CENTOS,
    FEED_AMAZL,
    // Ubuntu versions
    FEED_PRECISE,
    FEED_TRUSTY,
    FEED_XENIAL,
    FEED_BIONIC,
    // Debian versions
    FEED_JESSIE,
    FEED_STRETCH,
    FEED_WHEEZY,
    // RedHat versions
    FEED_RHEL5,
    FEED_RHEL6,
    FEED_RHEL7,
    // NVD
    FEED_NVD,
    FEED_CPED,
    // OTHER
    FEED_WIN,
    FEED_UNKNOW
} vu_feed;

typedef enum vu_ver_comp {
    VU_COMP_L,
    VU_COMP_LE,
    VU_COMP_G,
    VU_COMP_GE,
    VU_COMP_EQ,
    VU_COMP_EX
} vu_ver_comp;

typedef struct update_flags {
    unsigned int update:1;
    unsigned int update_ubuntu:1;
    unsigned int update_debian:1;
    unsigned int update_redhat:1;
    unsigned int update_nvd:1;
} update_flags;

typedef struct wm_vuldet_flags {
    unsigned int enabled:1;
    unsigned int run_on_start:1;
    update_flags u_flags;
} wm_vuldet_flags;

typedef struct wm_vuldet_state {
    time_t next_time;
} wm_vuldet_state;

typedef struct agent_software {
    char *agent_id;
    char *agent_name;
    char *agent_ip;
    char *agent_OS;
    char *arch;
    vu_feed dist;
    char info;
    struct agent_software *next;
    struct agent_software *prev;
} agent_software;

typedef enum cve_db{
    CVE_PRECISE,
    CVE_TRUSTY,
    CVE_XENIAL,
    CVE_BIONIC,
    CVE_JESSIE,
    CVE_STRETCH,
    CVE_WHEEZY,
    CVE_REDHAT,
    CVE_NVD,
    CPE_NVD,
    OS_SUPP_SIZE
} cve_db;

typedef struct update_node {
    char *dist;
    char *version;
    vu_feed dist_ref;
    const char *dist_tag;
    const char *dist_ext;
    time_t last_update;
    unsigned long interval;
    int update_from_year; // only for Red Hat and NVD feeds
    int update_it; // only NVD feeds
    char *url;
    in_port_t port;
    char *path;
    char **allowed_OS_list;
    char **allowed_ver_list;
    unsigned int attempted:1;
    unsigned int json_format:1;
} update_node;

typedef struct wm_vuldet_t {
    update_node *updates[OS_SUPP_SIZE];
    unsigned long detection_interval;
    unsigned long ignore_time;
    time_t last_detection;
    agent_software *agents_software;
    OSHash *agents_triag;
    int queue_fd;
    wm_vuldet_state state;
    wm_vuldet_flags flags;
} wm_vuldet_t;

typedef enum {
    V_OVALDEFINITIONS,
    V_DEFINITIONS,
    V_TESTS,
    V_OBJECTS,
    V_HEADER,
    V_DESCRIPTION,
    V_SIGNED_TEST,
    V_VARIABLES,
    V_STATES
} parser_state;

typedef struct vu_report {
    char *cve;
    char *title;
    char *rationale;
    char *severity;
    char *published;
    char *updated;
    char *state;
    char pending;
    char *cvss;
    char *cvss_vector;
    char *cvss3;
    char *cwe;
    char *advisories;
    char *bugzilla_reference;
    char *reference;
    char *package;
    char *version;
    char *operation;
    char *operation_value;
    char *agent_id;
    char *agent_name;
    char *agent_ip;
    char *ref_source;
    float exploitability_score;
    float impact_score;
} vu_report;

typedef struct oval_metadata {
    char *product_name;
    char *product_version;
    char *schema_version;
    char *timestamp;
} oval_metadata;

typedef struct info_state {
    char *id;
    char *operation;
    char *operation_value;
    char *arch_value;
    struct info_state *prev;
} info_state;

typedef struct info_test {
    char *id;
    char *state;
    char *second_state;
    struct info_test *prev;
} info_test;

typedef struct file_test {
    char *id;
    char *state;
    char *second_state;
    struct file_test *prev;
} file_test;

typedef struct info_cve {
    char *cveid;
    char *title; // Not available in Red Hat feed
    char *severity;
    char *published;
    char *updated;
    char *reference;
    char *description;
    char *cvss;
    char *cvss3;
    char *cvss_vector;
    char *bugzilla_reference;
    char *advisories;
    char *cwe;
    int flags;
    struct info_cve *prev;
} info_cve;

typedef struct vulnerability {
    char *cve_id;
    char *state_id;
    char *second_state_id;
    char *package_name;
    char pending;
    struct vulnerability *prev;
} vulnerability;

typedef struct rh_vulnerability {
    char *cve_id;
    const char *OS;
    char *package_name;
    char *package_version;
    struct rh_vulnerability *prev;
} rh_vulnerability;

typedef struct last_scan {
    char *last_scan_id;
    time_t last_scan_time;
} last_scan;

typedef struct wm_vuldet_db {
    vulnerability *vulnerabilities;
    rh_vulnerability *rh_vulnerabilities;
    nvd_vulnerability *nvd_vulnerabilities;
    info_test *info_tests;
    file_test *file_tests;
    info_state *info_states;
    info_cve *info_cves;
    cpe_list *nvd_cpes;
    oval_metadata metadata;
    const char *OS;
} wm_vuldet_db;

// NVD - CPE structures

typedef struct cpe {
    int id;
    char *part;
    char * vendor;
    char * product;
    char * version;
    char * update;
    char * edition;
    char * language;
    char * sw_edition;
    char * target_sw;
    char * target_hw;
    char * other;
} cpe;

typedef struct cpe_node {
    cpe * node;
    struct cpe_node * next;
    struct cpe_node * prev;
} cpe_node;

typedef struct cpe_list {
    cpe_node * first;
    cpe_node * last;
} cpe_list;

typedef struct vu_search_terms {
    char *generated_cpe;
    char *o_vendor;
    char *o_product;
    char *o_version;
    char *o_arch;
    char **vendor_terms;
    char **product_terms;
    char **version_terms;
    char **arch_terms;
    struct vu_search_terms *next;
    struct vu_search_terms *prev;
} vu_search_terms;

// NVD -CVE structures

typedef struct nvd_references {
    char *url;
    char *refsource;
    struct nvd_references *next;
} nvd_references;

typedef struct nvd_conf_cpe_match {
    int vulnerable;
    char *cpe_uri23;
    char *version_start_including;
    char *version_start_excluding;
    char *version_end_including;
    char *version_end_excluding;
    cpe *cpe_node;
    struct nvd_conf_cpe_match *next;
} nvd_conf_cpe_match;

typedef struct nvd_configuration {
    char *operator;
    struct nvd_configuration *children;
    nvd_conf_cpe_match *cpe_matches;
    struct nvd_configuration *next;
} nvd_configuration;

typedef struct cv_scoring_system {
    char *version;
    char *vector_string;
    float base_score;
    float exploitability_score;
    float impact_score;
} cv_scoring_system;

typedef struct nvd_vulnerability {
    char *id;
    char *cwe;
    char *description;
    nvd_references *references;
    nvd_configuration *configuration;
    cv_scoring_system *cvss2;
    cv_scoring_system *cvss3;
    char *published;
    char *last_modified;
    struct nvd_vulnerability *next;
} nvd_vulnerability;

typedef struct vu_nvd_report {
    int id;
    char *package;
    char pending;
    char vulnerable;
    char *operator;
    char *version;
    char *v_start_inc;
    char *v_start_exc;
    char *v_end_inc;
    char *v_end_exc;
    struct vu_nvd_report *next;
    struct vu_nvd_report *prev;
} vu_nvd_report;

int wm_vuldet_read(const OS_XML *xml, xml_node **nodes, wmodule *module);
int wm_vuldet_nvd_cpe_parser(char *path, wm_vuldet_db *parsed_vulnerabilities);
int wm_vuldet_insert_cpe_db(sqlite3 *db, cpe_list *node_list, char overwrite);
int wm_vuldet_sql_error(sqlite3 *db, sqlite3_stmt *stmt);
int wm_vuldet_step(sqlite3_stmt *stmt);
int wm_vuldet_get_min_cpe_index(sqlite3 *db, int *min_index);
int wm_vuldet_add_cpe(char *cpe_raw, cpe_list *node_list, int index);
int wm_vuldet_generate_agent_cpes(agent_software *agent);
int wm_vuldet_fetch_nvd_cve(update_node *update, char *repo);
int wm_vuldet_fetch_nvd_cpe(char *repo);
int wm_vuldet_json_nvd_parser(cJSON *json_feed, wm_vuldet_db *parsed_vulnerabilities);
int wm_vuldet_remove_nvd_metadata(int year);
int wm_vuldet_insert_nvd_cve(sqlite3 *db, nvd_vulnerability *nvd_data, int year);
void wm_vuldet_free_nvd_node(nvd_vulnerability *data);
int wm_vuldet_nvd_vulnerabilities(sqlite3 *db, char *agent_id);
int wm_checks_package_vulnerability(char *version, const char *operation, char *operation_value);
int wm_vuldet_send_agent_report(vu_report *report);
void wm_vuldet_free_report(vu_report *report);

#endif
#endif
