/*
 * Wazuh Module to analyze system vulnerabilities
 * Copyright (C) 2015-2019, Wazuh Inc.
 * January 4, 2018.
 *
 * This program is a free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef WM_VUNALIZER_DB
#define WM_VUNALIZER_DB

#define CVE_DBS_PATH            "queue/vulnerabilities/"
#define CVE_DB CVE_DBS_PATH     "cve.db"

#define AGENTS_TABLE            "AGENTS"
#define CVE_TABLE               "VULNERABILITIES"
#define CVE_INFO_TABLE          "VULNERABILITIES_INFO"
#define INFO_STATE_TABLE        "INFO_STATE"
#define METADATA_TABLE          "METADATA"
#define METADATADB_TABLE        "DB_METADATA"
#define MAX_QUERY_SIZE          OS_SIZE_1024
#define MAX_SQL_ATTEMPTS        10
#define VU_MAX_PACK_REQ         20

typedef enum vu_query {
    SELECT_QUERY,
    DELETE_QUERY,
    TIMESTAMP_QUERY,
    VU_INSERT_QUERY,
    VU_INSERT_CVE,
    VU_INSERT_CVE_INFO,
    VU_INSERT_METADATA,
    VU_INSERT_METADATA_DB,
    VU_INSERT_AGENTS,
    VU_UPDATE_DOUBLE_CVE,
    VU_UPDATE_CVE,
    VU_UPDATE_CVE_SEC,
    VU_UPDATE_CVE_VAL,
    VU_UPDATE_CVE_VAL_SEC,
    VU_JOIN_QUERY,
    VU_JOIN_RH_QUERY,
    VU_REMOVE_OS,
    VU_REMOVE_AGENTS_TABLE,
    VU_REMOVE_PATCH,
    VU_GLOBALDB_REQUEST,
    // WAZUH DB REQUESTS
    VU_SOFTWARE_REQUEST,
    VU_SOFTWARE_FULL_REQ,
    VU_SYSC_SCAN_REQUEST,
    VU_SYSC_UPDATE_SCAN,
    VU_SYSC_UPDATE_CPE,
    // CPE INDEX
    VU_INSERT_CPE,
    VU_REMOVE_CPE,
    VU_REMOVE_AGENT_CPE,
    VU_SEARCH_AGENT_CPE,
    VU_MIN_CPEINDEX,
    VU_GET_PACK_WITHOUT_CPE,
    VU_GET_AGENT_CPES,
    VU_UPDATE_AGENT_CPE,
    // NVD
    VU_GET_NVD_LASTMOD,
    VU_REP_NVD_METADATA,
    VU_REMOVE_NVD_METADATA,
    INSERT_NVD_CVE,
    GET_MAX_NVD_CVE_ID,
    INSERT_NVD_METRIC_CVSS,
    INSERT_NVD_REFERENCE,
    INSERT_NVD_CVE_CONFIGURATION,
    GET_MAX_CONFIGURATION_ID,
    INSERT_NVD_CVE_MATCH,
    INSERT_NVD_CPE,
    GET_AN_CPE_ID,
    GET_MAX_NVD_CPE_ID,
    GET_CVE,
    GET_REFERENCE,
    GET_SCORING,
    // NVD REPORT
    GET_DICT_CPE,
    GET_NVD_CPE,
    GET_NVD_MATCH,
    GET_CONF,
    // SQL OPERATIONS
    VU_REMOVE_SQUENCE,
    BEGIN_T,
    END_T
} vu_query;

static const char *vu_queries[] = {
    "SELECT %s FROM %s WHERE %s;",
    "DELETE FROM %s WHERE %s;",
    "SELECT TIMESTAMP FROM " METADATA_TABLE " WHERE OS = ?;",
    "INSERT INTO ",
    "INSERT INTO " CVE_TABLE " VALUES(?,?,?,?,?,?,?,?);",
    "INSERT INTO " CVE_INFO_TABLE " VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?);",
    "INSERT INTO " METADATA_TABLE " VALUES(?,?,?,?,?);",
    "INSERT INTO " METADATADB_TABLE " VALUES(?);",
    "INSERT INTO " AGENTS_TABLE " VALUES(?,?,?,?,?,?);",
    "UPDATE " CVE_TABLE " SET OPERATION = ?, SECOND_OPERATION = ? WHERE OPERATION = ? AND SECOND_OPERATION IS NULL;",
    "UPDATE " CVE_TABLE " SET OPERATION = ? WHERE OPERATION = ?;",
    "UPDATE " CVE_TABLE " SET SECOND_OPERATION = ? WHERE SECOND_OPERATION = ?;",
    "UPDATE " CVE_TABLE " SET OPERATION = ?, OPERATION_VALUE = ? WHERE OPERATION = ?;",
    "UPDATE " CVE_TABLE " SET SECOND_OPERATION = ?, SECOND_OPERATION_VALUE = ? WHERE SECOND_OPERATION = ?;",
    "SELECT ID, PACKAGE_NAME, TITLE, SEVERITY, PUBLISHED, UPDATED, REFERENCE, RATIONALE, VERSION, OPERATION, OPERATION_VALUE, SECOND_OPERATION, SECOND_OPERATION_VALUE, PENDING, CVSS, CVSS3 FROM " CVE_INFO_TABLE " INNER JOIN " CVE_TABLE " ON ID = CVEID AND " CVE_INFO_TABLE ".OS = " CVE_TABLE ".OS INNER JOIN " AGENTS_TABLE " ON PACKAGE_NAME = PACKAGE WHERE VULNERABILITIES_INFO.OS = ? AND AGENT_ID = ? ORDER BY ID;",
    "SELECT ID, PACKAGE_NAME, TITLE, SEVERITY, PUBLISHED, UPDATED, REFERENCE, RATIONALE, VERSION, OPERATION, OPERATION_VALUE, SECOND_OPERATION, SECOND_OPERATION_VALUE, PENDING, CVSS, CVSS3, CVSS_VECTOR, BUGZILLA_REFERENCE, CWE, ADVISORIES FROM VULNERABILITIES_INFO INNER JOIN VULNERABILITIES ON ID = CVEID AND VULNERABILITIES_INFO.OS = 'REDHAT' AND VULNERABILITIES.OS = ? INNER JOIN AGENTS ON AGENT_ID = ? AND PACKAGE_NAME = PACKAGE ORDER BY ID;",
    "DELETE FROM %s WHERE OS = ?;",
    "DELETE FROM " AGENTS_TABLE ";",
    "DELETE FROM " CVE_TABLE " WHERE CVEID = ?;",
    "SELECT OS_NAME, OS_MAJOR, NAME, ID, IP, OS_ARCH FROM AGENT WHERE (STRFTIME('%s', 'NOW', 'LOCALTIME') - STRFTIME('%s', LAST_KEEPALIVE)) < ?;",
    // WAZUH DB REQUESTS
    "agent %s sql SELECT DISTINCT NAME, VERSION, ARCHITECTURE, VENDOR, CPE FROM SYS_PROGRAMS WHERE TRIAGED != 1 AND SCAN_ID = '%s' LIMIT %i OFFSET %i;",
    "agent %s sql SELECT DISTINCT NAME, VERSION, ARCHITECTURE, VENDOR, CPE FROM SYS_PROGRAMS WHERE SCAN_ID = '%s' LIMIT %i OFFSET %i;",
    "agent %s sql SELECT SCAN_ID FROM SYS_PROGRAMS WHERE SCAN_TIME = (SELECT SCAN_TIME FROM SYS_PROGRAMS S1 WHERE NOT EXISTS (SELECT SCAN_TIME FROM SYS_PROGRAMS S2 WHERE S2.SCAN_TIME > S1.SCAN_TIME)) LIMIT 1;",
    "agent %s sql UPDATE SYS_PROGRAMS SET TRIAGED = 1 WHERE SCAN_ID = '%s';",
    "agent %s sql UPDATE SYS_PROGRAMS SET CPE = '%s:%s:%s:%s:%s:%s:%s:%s:%s:%s:%s' WHERE VENDOR = '%s' AND NAME = '%s' AND VERSION = '%s' AND ARCHITECTURE = '%s';",
    // CPE INDEX
    "INSERT INTO CPE_INDEX VALUES(?,?,?,?,?,?,?,?,?,?,?,?);",
    "DELETE FROM CPE_INDEX;",
    "DELETE FROM CPE_INDEX WHERE ID < 0;",
    "SELECT DISTINCT PART FROM CPE_INDEX WHERE PART = 'a' AND VENDOR = ? AND PRODUCT = ?;",
    "SELECT MIN(ID) FROM CPE_INDEX;",
    "SELECT VENDOR, PACKAGE_NAME, VERSION, ARCH FROM AGENTS WHERE AGENT_ID = ? AND CPE_INDEX_ID = 0;",
    "SELECT PART, CPE_INDEX.VENDOR, PRODUCT, CPE_INDEX.VERSION, UPDATEV, EDITION, LANGUAGE, SW_EDITION, TARGET_SW, TARGET_HW, OTHER, AGENTS.VENDOR, PACKAGE_NAME, AGENTS.VERSION, ARCH FROM AGENTS JOIN CPE_INDEX ON CPE_INDEX_ID = ID WHERE AGENT_ID = ?;",
    "UPDATE AGENTS SET CPE_INDEX_ID = ? WHERE AGENT_ID = ? AND VENDOR = ? AND PACKAGE_NAME = ? AND VERSION = ? AND ARCH = ?;",
    // NVD
    "SELECT LAST_MODIFIED FROM NVD_METADATA WHERE YEAR = ?;",
    "REPLACE INTO NVD_METADATA VALUES(?,?,?,?,?,?,?);",
    "DELETE FROM NVD_METADATA WHERE YEAR = ?;",
    "INSERT INTO NVD_CVE VALUES(NULL,?,?,?,?,?,?);",
    "SELECT MAX(ID) FROM NVD_CVE;",
    "INSERT INTO NVD_METRIC_CVSS VALUES(NULL,?,?,?,?,?,?);",
    "INSERT INTO NVD_REFERENCE VALUES(NULL,?,?,?);",
    "INSERT INTO NVD_CVE_CONFIGURATION VALUES(NULL,?,?,?);",
    "SELECT MAX(ID) FROM NVD_CVE_CONFIGURATION;",
    "INSERT INTO NVD_CVE_MATCH VALUES(NULL,?,?,?,?,?,?,?,?);",
    "INSERT INTO NVD_CPE VALUES(?,?,?,?,?,?,?,?,?,?,?,?);",
    "SELECT ID FROM NVD_CPE WHERE PART = ? AND VENDOR = ? AND PRODUCT = ? AND VERSION = ? AND UPDATED = ? AND EDITION = ? AND LANGUAGE = ? AND SW_EDITION = ? AND TARGET_SW = ? AND TARGET_HW = ? AND OTHER = ?;",
    "SELECT MAX(ID) FROM NVD_CPE;",
    "SELECT CVE_ID, CWE_ID, DESCRIPTION, PUBLISHED, LAST_MODIFIED FROM NVD_CVE WHERE ID = ?;",
    "SELECT URL, REF_SOURCE FROM NVD_REFERENCE WHERE NVD_CVE_ID = ? LIMIT 1;",
    "SELECT VECTOR_STRING, BASE_SCORE, EXPLOITABILITY_SCORE, IMPACT_SCORE FROM NVD_METRIC_CVSS WHERE NVD_CVE_ID = ? AND VERSION = ?;",
    // NVD REPORT 
    "SELECT CPE_INDEX.VENDOR, CPE_INDEX.PRODUCT, CPE_INDEX.VERSION FROM AGENTS INNER JOIN CPE_INDEX ON AGENTS.AGENT_ID = ? AND AGENTS.CPE_INDEX_ID < 0 AND CPE_INDEX.ID<0 AND CPE_INDEX.ID=AGENTS.CPE_INDEX_ID;",
    "SELECT NVD_CPE.ID FROM NVD_CPE WHERE NVD_CPE.VENDOR=? AND NVD_CPE.PRODUCT=? AND NVD_CPE.VERSION=?;",
    "SELECT NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.URI, NVD_CVE_MATCH.VULNERABLE, NVD_CVE_MATCH.VERSION_START_INCLUDING, NVD_CVE_MATCH.VERSION_START_EXCLUDING, NVD_CVE_MATCH.VERSION_END_INCLUDING, NVD_CVE_MATCH.VERSION_END_EXCLUDING FROM NVD_CVE_MATCH WHERE NVD_CVE_MATCH.ID_CPE = ?;",
    "SELECT NVD_CVE.CVE_ID, NVD_CVE_CONFIGURATION.NVD_CVE_ID, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CVE_CONFIGURATION.PARENT FROM NVD_CVE_CONFIGURATION INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.ID = NVD_CVE.ID WHERE NVD_CVE_CONFIGURATION.ID = ?;",
    // SQL OPERATIONS
    "DELETE FROM SQLITE_SEQUENCE WHERE NAME = ?;",
    "BEGIN TRANSACTION;",
    "END TRANSACTION;"
};

extern char *schema_vuln_detector_sql;

#endif
